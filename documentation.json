{
    "pipes": [],
    "interfaces": [
        {
            "name": "RouterStateUrl",
            "id": "interface-RouterStateUrl-3ac842948ff205b6c898c17a8c5eec8e",
            "file": "src/app/reducers/custom-route-serializer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Params, RouterStateSnapshot } from \"@angular/router\";\nimport { RouterStateSerializer } from \"@ngrx/router-store\";\n\nexport interface RouterStateUrl {\n  url: string;\n  params: Params;\n  queryParams: Params;\n}\n\nexport class CustomSerializer implements RouterStateSerializer<RouterStateUrl> {\n  serialize(routerState: RouterStateSnapshot): RouterStateUrl {\n    let route = routerState.root;\n\n    while (route.firstChild) {\n      route = route.firstChild;\n    }\n\n    const {\n      url,\n      root: { queryParams },\n    } = routerState;\n    const { params } = route;\n\n    // Only return an object including the URL, params and query params\n    // instead of the entire snapshot\n    return { url, params, queryParams };\n  }\n}\n",
            "properties": [
                {
                    "name": "params",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Params",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "queryParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Params",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-0c3f2c17963d67a380a3588ce879b7d0",
            "file": "src/app/reducers/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  ActionReducer,\n  ActionReducerMap,\n  createFeatureSelector,\n  MetaReducer,\n} from \"@ngrx/store\";\nimport { routerReducer, RouterReducerState } from \"@ngrx/router-store\";\nimport { storeLogger } from \"ngrx-store-logger\";\nimport { metaReducerForStorybook } from \"storybook-ngrx-helper\";\n\nimport { environment } from \"@environments/environment\";\nimport { RouterStateUrl } from \"./custom-route-serializer\";\n\nexport interface State {\n  router: RouterReducerState<RouterStateUrl>;\n}\n\nexport const reducers: ActionReducerMap<State> = {\n  router: routerReducer,\n};\n\nexport const metaReducers: MetaReducer<State>[] = !environment.production\n  ? [\n      metaReducerForStorybook,\n      (reducer: ActionReducer<any>) =>\n        storeLogger({ collapsed: true })(reducer),\n    ]\n  : [];\n\nexport const getRouterState =\n  createFeatureSelector<RouterReducerState<RouterStateUrl>>(\"router\");\n",
            "properties": [
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RouterReducerState<RouterStateUrl>",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "Todo",
            "id": "interface-Todo-0f8576a57f6685605423a21425a90ee3",
            "file": "src/app/todos/models/todo.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Todo {\n  id?: number;\n  title: string;\n  completed: boolean;\n}\n",
            "properties": [
                {
                    "name": "completed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "TodosModuleState",
            "id": "interface-TodosModuleState-0f3557ed590e4ec1e34a41d2d609b080",
            "file": "src/app/todos/states/todos-module.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TodosState } from \"./todos.state\";\nimport { TodosUIState } from \"./todos-ui.state\";\n\nexport interface TodosModuleState {\n  todos: TodosState;\n  todosUI: TodosUIState;\n}\n",
            "properties": [
                {
                    "name": "todos",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TodosState",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "todosUI",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TodosUIState",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "TodosUIState",
            "id": "interface-TodosUIState-87b11d2028be31ce2e45c88cd90e4d5a",
            "file": "src/app/todos/states/todos-ui.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TodosUIState {\n  errorLoadingTodos: string | null;\n  loadingTodos: boolean;\n  errorAddTodo: string | null;\n  loadingAddTodo: boolean;\n  errorUpdateTodo: string | null;\n  loadingUpdateTodo: boolean;\n  errorDeleteTodo: string | null;\n  loadingDeleteTodo: boolean;\n}\n",
            "properties": [
                {
                    "name": "errorAddTodo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "errorDeleteTodo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "errorLoadingTodos",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "errorUpdateTodo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "loadingAddTodo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "loadingDeleteTodo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "loadingTodos",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "loadingUpdateTodo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "TodosEffects",
            "id": "injectable-TodosEffects-e8946308e2986798868da5936497caf2",
            "file": "src/app/todos/effects/todos.effects.ts",
            "properties": [
                {
                    "name": "addTodoRequest$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(addTodoRequest),\n      switchMap((action) => {\n        return this.todosService.createTodo(action.todo).pipe(\n          mergeMap((newTodo) => [addTodo({ todo: newTodo }), addTodoSuccess()]),\n          catchError((error) => of(addTodoFail({ error })))\n        );\n      })\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "deleteTodoRequest$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(deleteTodoRequest),\n      switchMap(({ id }) => {\n        return this.todosService.deleteTodo(id).pipe(\n          mergeMap(() => [deleteTodo({ id }), deleteTodoSuccess()]),\n          catchError((error) => of(deleteTodoFail({ error })))\n        );\n      })\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "loadTodosRequest",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(loadTodosRequest),\n      switchMap(() => {\n        return this.todosService.getAllTodos().pipe(\n          mergeMap((todos) => [loadTodos({ todos }), loadTodosSuccess()]),\n          catchError((error) => of(loadTodosFail({ error })))\n        );\n      })\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "updateTodoRequest$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(updateTodoRequest),\n      switchMap((action) => {\n        const { update } = action;\n        return this.todosService\n          .updateTodo({\n            ...update.changes,\n            id: update.id as number,\n          })\n          .pipe(\n            mergeMap(() => [updateTodo({ update }), updateTodoSuccess()]),\n            catchError((error) => of(updateTodoFail({ error })))\n          );\n      })\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { Actions, ofType, createEffect } from \"@ngrx/effects\";\nimport { of } from \"rxjs\";\nimport { switchMap, catchError, mergeMap } from \"rxjs/operators\";\n\nimport {\n  loadTodos,\n  loadTodosRequest,\n  loadTodosSuccess,\n  loadTodosFail,\n  addTodo,\n  addTodoRequest,\n  addTodoSuccess,\n  addTodoFail,\n  updateTodo,\n  updateTodoRequest,\n  updateTodoSuccess,\n  updateTodoFail,\n  deleteTodo,\n  deleteTodoRequest,\n  deleteTodoSuccess,\n  deleteTodoFail,\n} from \"@todos/actions\";\n\nimport { TodosService } from \"@todos/services/todos.service\";\n\n@Injectable()\nexport class TodosEffects {\n  loadTodosRequest = createEffect(() =>\n    this.actions$.pipe(\n      ofType(loadTodosRequest),\n      switchMap(() => {\n        return this.todosService.getAllTodos().pipe(\n          mergeMap((todos) => [loadTodos({ todos }), loadTodosSuccess()]),\n          catchError((error) => of(loadTodosFail({ error })))\n        );\n      })\n    )\n  );\n\n  addTodoRequest$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(addTodoRequest),\n      switchMap((action) => {\n        return this.todosService.createTodo(action.todo).pipe(\n          mergeMap((newTodo) => [addTodo({ todo: newTodo }), addTodoSuccess()]),\n          catchError((error) => of(addTodoFail({ error })))\n        );\n      })\n    )\n  );\n\n  updateTodoRequest$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(updateTodoRequest),\n      switchMap((action) => {\n        const { update } = action;\n        return this.todosService\n          .updateTodo({\n            ...update.changes,\n            id: update.id as number,\n          })\n          .pipe(\n            mergeMap(() => [updateTodo({ update }), updateTodoSuccess()]),\n            catchError((error) => of(updateTodoFail({ error })))\n          );\n      })\n    )\n  );\n\n  deleteTodoRequest$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(deleteTodoRequest),\n      switchMap(({ id }) => {\n        return this.todosService.deleteTodo(id).pipe(\n          mergeMap(() => [deleteTodo({ id }), deleteTodoSuccess()]),\n          catchError((error) => of(deleteTodoFail({ error })))\n        );\n      })\n    )\n  );\n\n  constructor(private actions$: Actions, private todosService: TodosService) {}\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "todosService",
                        "type": "TodosService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 81,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "todosService",
                        "type": "TodosService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TodosService",
            "id": "injectable-TodosService-110e23b0c68c33854515efd733a91992",
            "file": "src/app/todos/services/todos.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createTodo",
                    "args": [
                        {
                            "name": "todo",
                            "type": "Todo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Todo>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "todo",
                            "type": "Todo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteTodo",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Todo>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllTodos",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Todo[]>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateTodo",
                    "args": [
                        {
                            "name": "todo",
                            "type": "Partial<Todo>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Todo>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "todo",
                            "type": "Partial<Todo>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, Inject } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\n\nimport { Todo } from \"@todos/models\";\nimport { Observable } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\n\n@Injectable()\nexport class TodosService {\n  constructor(\n    @Inject(\"API_URL\") private apiUrl: string,\n    private http: HttpClient\n  ) {}\n\n  getAllTodos(): Observable<Todo[]> {\n    const url = `${this.apiUrl}/todos`;\n    return this.http.get<Todo[]>(url).pipe(map((todos) => todos.slice(0, 10)));\n  }\n\n  createTodo(todo: Todo): Observable<Todo> {\n    const url = `${this.apiUrl}/todos`;\n    return this.http\n      .post(url, { todo })\n      .pipe(map((response: any) => response.todo));\n  }\n\n  updateTodo(todo: Partial<Todo>): Observable<Todo> {\n    const url = `${this.apiUrl}/todos/${todo.id}`;\n    return this.http\n      .patch(url, { todo })\n      .pipe(map((response: any) => response.todo));\n  }\n\n  deleteTodo(id: number): Observable<Todo> {\n    const url = `${this.apiUrl}/todos/${id}`;\n    return this.http.delete(url).pipe(map((response: any) => response.todo));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "apiUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "apiUrl",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "TodosGuard",
            "id": "injectable-TodosGuard-25fa3a3b1871290f0b7037e98a738fe1",
            "file": "src/app/todos/guards/todos.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "checkTodos",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "dispatchLoadTodos",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\nimport { CanActivate } from \"@angular/router\";\nimport { Store, select } from \"@ngrx/store\";\nimport { Observable, of, forkJoin } from \"rxjs\";\nimport { tap, take, switchMap, catchError } from \"rxjs/operators\";\n\nimport { TodosModuleState } from \"@todos/states\";\nimport { getCountAllTodos } from \"@todos/selectors\";\nimport { loadTodosRequest } from \"@todos/actions\";\n\n@Injectable()\nexport class TodosGuard implements CanActivate {\n  constructor(private store: Store<TodosModuleState>) {}\n\n  canActivate(): Observable<boolean> {\n    return forkJoin([this.checkTodos()]).pipe(\n      switchMap(() => of(true)),\n      catchError(() => of(false))\n    );\n  }\n\n  private checkTodos() {\n    return this.store.pipe(\n      select(getCountAllTodos),\n      tap((total) => {\n        if (total === 0) {\n          this.dispatchLoadTodos();\n        }\n      }),\n      take(1)\n    );\n  }\n\n  private dispatchLoadTodos() {\n    const action = loadTodosRequest();\n    this.store.dispatch(action);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<TodosModuleState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<TodosModuleState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [],
    "classes": [
        {
            "name": "CustomSerializer",
            "id": "class-CustomSerializer-3ac842948ff205b6c898c17a8c5eec8e",
            "file": "src/app/reducers/custom-route-serializer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Params, RouterStateSnapshot } from \"@angular/router\";\nimport { RouterStateSerializer } from \"@ngrx/router-store\";\n\nexport interface RouterStateUrl {\n  url: string;\n  params: Params;\n  queryParams: Params;\n}\n\nexport class CustomSerializer implements RouterStateSerializer<RouterStateUrl> {\n  serialize(routerState: RouterStateSnapshot): RouterStateUrl {\n    let route = routerState.root;\n\n    while (route.firstChild) {\n      route = route.firstChild;\n    }\n\n    const {\n      url,\n      root: { queryParams },\n    } = routerState;\n    const { params } = route;\n\n    // Only return an object including the URL, params and query params\n    // instead of the entire snapshot\n    return { url, params, queryParams };\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "serialize",
                    "args": [
                        {
                            "name": "routerState",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "RouterStateUrl",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "routerState",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "RouterStateSerializer"
            ]
        },
        {
            "name": "CustomValidators",
            "id": "class-CustomValidators-8770ba8df7faf0e674d8d95756513830",
            "file": "src/app/utils/validators.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { FormControl } from \"@angular/forms\";\n\nexport class CustomValidators {\n  static isBlank(control: FormControl): { [key: string]: boolean } | null {\n    const { value } = control;\n    if (value === null || value === \"\") {\n      return null;\n    }\n    if (value.trim() === \"\") {\n      return { is_blank: true };\n    }\n    return null;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "isBlank",
                    "args": [
                        {
                            "name": "control",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type | null",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-cc984f088ec6f8c1c43dde490630593a",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from \"@angular/core\";\n\n@Component({\n  selector: \"app-root\",\n  templateUrl: \"./app.component.html\",\n})\nexport class AppComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "<router-outlet></router-outlet>\n"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-0a4633175f0cc0195553f7782392e205",
            "file": "src/app/todos/components/footer/footer.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-footer",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "countTodos",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "number"
                },
                {
                    "name": "currentFilter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  Input,\n  ChangeDetectionStrategy,\n} from \"@angular/core\";\n\n@Component({\n  selector: \"app-footer\",\n  templateUrl: \"./footer.component.html\",\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterComponent implements OnInit {\n  @Input() countTodos: number;\n  @Input() currentFilter: string;\n\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<footer id=\"footer\" class=\"footer\">\n  <span id=\"todo-count\" class=\"todo-count\">{{ countTodos }} items left</span>\n  <ul id=\"filters\" class=\"filters\">\n    <li>\n      <a routerLink=\"/\" [class.selected]=\"currentFilter === 'all'\"> All </a>\n    </li>\n    <li>\n      <a routerLink=\"/active\" [class.selected]=\"currentFilter === 'active'\">\n        Active\n      </a>\n    </li>\n    <li>\n      <a\n        routerLink=\"/completed\"\n        [class.selected]=\"currentFilter === 'completed'\"\n      >\n        Completed\n      </a>\n    </li>\n  </ul>\n</footer>\n"
        },
        {
            "name": "LayoutContainer",
            "id": "component-LayoutContainer-95c7c11ecf85a7b38cb428bcba887dad",
            "file": "src/app/todos/containers/layout/layout.container.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-layout",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./layout.container.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "counter$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "filter$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string>",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSaveTodo",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy } from \"@angular/core\";\nimport { Store, select } from \"@ngrx/store\";\n\nimport { TodosModuleState } from \"@todos/states\";\nimport { addTodoRequest } from \"@todos/actions\";\nimport { getCountVisibleTodos, getFilter } from \"@todos/selectors\";\nimport { Todo } from \"@todos/models\";\nimport { Observable } from \"rxjs\";\n\n@Component({\n  selector: \"app-layout\",\n  templateUrl: \"./layout.container.html\",\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n// tslint:disable-next-line: component-class-suffix\nexport class LayoutContainer implements OnInit {\n  counter$: Observable<number>;\n  filter$: Observable<string>;\n\n  constructor(private store: Store<TodosModuleState>) {\n    this.counter$ = this.store.pipe(select(getCountVisibleTodos));\n    this.filter$ = this.store.pipe(select(getFilter));\n  }\n\n  ngOnInit() {}\n\n  onSaveTodo(title: string) {\n    const todo: Todo = {\n      id: Math.floor(Math.random() * (300 - 200)) + 200,\n      title,\n      completed: false,\n    };\n    const action = addTodoRequest({ todo });\n    this.store.dispatch(action);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<TodosModuleState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<TodosModuleState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<section class=\"todoapp\">\n  <header class=\"header\">\n    <h1>todos</h1>\n    <app-new-todo (saveTodo)=\"onSaveTodo($event)\"></app-new-todo>\n  </header>\n  <app-todo-list></app-todo-list>\n  <app-footer\n    [countTodos]=\"counter$ | async\"\n    [currentFilter]=\"filter$ | async\"\n  ></app-footer>\n</section>\n<footer class=\"info\">\n  <p>Double-click to edit a todo</p>\n  <p>Written by <a href=\"http://twitter.com/nicobytes\">Nicolas Molina</a></p>\n  <p>\n    Using <a href=\"https://angular.io/\">Angular</a> and\n    <a href=\"https://ngrx.github.io/\">ngrx/store</a>\n  </p>\n  <p>Part of <a href=\"http://todomvc.com\">TodoMVC</a></p>\n</footer>\n"
        },
        {
            "name": "NewTodoComponent",
            "id": "component-NewTodoComponent-b655a20b185a821f30e4d3c01e3d6c75",
            "file": "src/app/todos/components/new-todo/new-todo.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-new-todo",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./new-todo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "saveTodo",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "textField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "addTodo",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n} from \"@angular/core\";\nimport { FormControl, Validators } from \"@angular/forms\";\n\nimport { CustomValidators } from \"@utils/validators\";\n\n@Component({\n  selector: \"app-new-todo\",\n  templateUrl: \"./new-todo.component.html\",\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NewTodoComponent implements OnInit {\n  textField: FormControl;\n\n  @Output() saveTodo: EventEmitter<string> = new EventEmitter();\n\n  constructor() {\n    this.textField = new FormControl(\"\", [\n      Validators.required,\n      CustomValidators.isBlank,\n    ]);\n  }\n\n  ngOnInit() {}\n\n  addTodo() {\n    if (this.textField.valid) {\n      const text: string = this.textField.value;\n      this.textField.setValue(\"\", { emitEvent: false });\n      this.saveTodo.emit(text);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 20
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<input\n  id=\"new-todo\"\n  class=\"new-todo\"\n  type=\"text\"\n  autofocus\n  (keyup.enter)=\"addTodo()\"\n  placeholder=\"What needs to be done?\"\n  [formControl]=\"textField\"\n/>\n"
        },
        {
            "name": "TodoComponent",
            "id": "component-TodoComponent-91698d8aa666a6c86db2e5c691d78c79",
            "file": "src/app/todos/components/todo/todo.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-todo",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./todo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "todo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "delete",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "EventEmitter<number>"
                },
                {
                    "name": "update",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "EventEmitter<Update<Todo>>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_todo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Todo",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "checkField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "editing",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "textField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "textInput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'textInput', {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "activeEditMode",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "deleteTodo",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateText",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  OnInit,\n  Input,\n  ViewChild,\n  Output,\n  EventEmitter,\n  ElementRef,\n  ChangeDetectionStrategy,\n} from \"@angular/core\";\nimport { FormControl, Validators } from \"@angular/forms\";\nimport { Update } from \"@ngrx/entity\";\n\nimport { Todo } from \"@todos/models\";\nimport { CustomValidators } from \"@app/utils/validators\";\n\n@Component({\n  selector: \"app-todo\",\n  templateUrl: \"./todo.component.html\",\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TodoComponent implements OnInit {\n  _todo: Todo;\n\n  @Input()\n  set todo(todo: Todo) {\n    this._todo = todo;\n    this.textField.setValue(this._todo.title);\n    this.checkField.setValue(this._todo.completed, { emitEvent: false });\n  }\n\n  @ViewChild(\"textInput\", { static: true }) textInput: ElementRef;\n  textField: FormControl;\n  checkField: FormControl;\n  editing: boolean;\n\n  @Output() update: EventEmitter<Update<Todo>> = new EventEmitter();\n  @Output() delete: EventEmitter<number> = new EventEmitter();\n\n  constructor() {\n    this.textField = new FormControl(\"\", [\n      Validators.required,\n      CustomValidators.isBlank,\n    ]);\n    this.checkField = new FormControl(false);\n    this.checkField.valueChanges.subscribe((state) => {\n      const update = {\n        id: this._todo.id,\n        changes: {\n          completed: state,\n        },\n      };\n      this.update.emit(update);\n    });\n  }\n\n  ngOnInit() {}\n\n  updateText() {\n    if (this.textField.valid && this.editing) {\n      const update = {\n        id: this._todo.id,\n        changes: {\n          title: this.textField.value,\n        },\n      };\n      this.update.emit(update);\n      this.editing = false;\n    }\n  }\n\n  activeEditMode() {\n    this.editing = true;\n    setTimeout(() => {\n      this.textInput.nativeElement.focus();\n    });\n  }\n\n  deleteTodo() {\n    this.delete.emit(this._todo.id);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 38
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "todo": {
                    "name": "todo",
                    "setSignature": {
                        "name": "todo",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "todo",
                                "type": "Todo",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 26,
                        "jsdoctags": [
                            {
                                "name": "todo",
                                "type": "Todo",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<li [class.completed]=\"_todo.completed\" [class.editing]=\"editing\">\n  <div class=\"view\">\n    <input class=\"toggle\" type=\"checkbox\" [formControl]=\"checkField\" />\n    <label (dblclick)=\"activeEditMode()\">\n      {{ _todo.title }}\n    </label>\n    <a class=\"detail\" [routerLink]=\"['/detail', _todo.id]\">></a>\n    <button class=\"destroy\" (click)=\"deleteTodo()\"></button>\n  </div>\n  <input\n    class=\"edit\"\n    type=\"text\"\n    #textInput\n    (keyup.enter)=\"updateText()\"\n    (blur)=\"updateText()\"\n    [formControl]=\"textField\"\n    [hidden]=\"editing\"\n  />\n</li>\n"
        },
        {
            "name": "TodoDetailContainer",
            "id": "component-TodoDetailContainer-8602c1325b163667e9624be4bfcf6c1b",
            "file": "src/app/todos/containers/todo-detail/todo-detail.container.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-todo-detail",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./todo-detail.container.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "todo$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Todo>",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy } from \"@angular/core\";\nimport { Store, select } from \"@ngrx/store\";\nimport { Observable } from \"rxjs\";\nimport { filter } from \"rxjs/operators\";\n\nimport { TodosModuleState } from \"@todos/states\";\nimport { getTodo } from \"@todos/selectors\";\nimport { Todo } from \"@todos/models\";\n\n@Component({\n  selector: \"app-todo-detail\",\n  templateUrl: \"./todo-detail.container.html\",\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n// tslint:disable-next-line: component-class-suffix\nexport class TodoDetailContainer implements OnInit {\n  todo$: Observable<Todo>;\n\n  constructor(private store: Store<TodosModuleState>) {\n    this.todo$ = this.store.pipe(\n      select(getTodo),\n      filter((todo) => todo !== null)\n    );\n  }\n\n  ngOnInit() {}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<TodosModuleState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<TodosModuleState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<section id=\"main\" class=\"main\" *ngIf=\"todo$ | async as todo\">\n  <h1>{{ todo.title }}</h1>\n  <p>{{ todo.completed }}</p>\n</section>\n"
        },
        {
            "name": "TodoListContainer",
            "id": "component-TodoListContainer-baef44e923538b99a5faf0f989427bc2",
            "file": "src/app/todos/containers/todo-list/todo-list.container.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-todo-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./todo-list.container.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "checkField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "todos$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Todo[]>",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDelete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onUpdate",
                    "args": [
                        {
                            "name": "update",
                            "type": "Update<Todo>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "update",
                            "type": "Update<Todo>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ChangeDetectionStrategy } from \"@angular/core\";\nimport { FormControl } from \"@angular/forms\";\nimport { Store, select } from \"@ngrx/store\";\nimport { Update } from \"@ngrx/entity\";\nimport { Observable } from \"rxjs\";\n\nimport { TodosModuleState } from \"@todos/states\";\nimport { deleteTodoRequest, updateTodoRequest } from \"@todos/actions\";\nimport { getVisibleTodos } from \"@todos/selectors\";\nimport { Todo } from \"@todos/models\";\n\n@Component({\n  selector: \"app-todo-list\",\n  templateUrl: \"./todo-list.container.html\",\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TodoListContainer implements OnInit {\n  todos$: Observable<Todo[]>;\n  checkField: FormControl;\n\n  constructor(private store: Store<TodosModuleState>) {\n    this.checkField = new FormControl(false);\n    this.todos$ = this.store.pipe(select(getVisibleTodos));\n  }\n\n  ngOnInit() {}\n\n  onUpdate(update: Update<Todo>) {\n    const action = updateTodoRequest({ update });\n    this.store.dispatch(action);\n  }\n\n  onDelete(id: number) {\n    const action = deleteTodoRequest({ id });\n    this.store.dispatch(action);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<TodosModuleState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<TodosModuleState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<section id=\"main\" class=\"main\" *ngIf=\"todos$ | async as todos\">\n  <ul id=\"todo-list\" class=\"todo-list\">\n    <app-todo\n      (update)=\"onUpdate($event)\"\n      (delete)=\"onDelete($event)\"\n      [todo]=\"todo\"\n      *ngFor=\"let todo of todos\"\n    ></app-todo>\n  </ul>\n</section>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-b9e80f7e0fe3338e4777f832d4d13e4c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { BrowserModule } from \"@angular/platform-browser\";\nimport { HttpClientModule } from \"@angular/common/http\";\nimport { LocationStrategy, HashLocationStrategy } from \"@angular/common\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { NgModule } from \"@angular/core\";\n\nimport { environment } from \"@environments/environment\";\nimport { StoreRouterConnectingModule } from \"@ngrx/router-store\";\n\nimport { AppComponent } from \"./app.component\";\nimport { AppRoutingModule } from \"./app-routing.module\";\nimport { AppStoreModule } from \"./store.module\";\nimport { CustomSerializer } from \"./reducers/custom-route-serializer\";\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    StoreRouterConnectingModule.forRoot({\n      serializer: CustomSerializer,\n    }),\n    BrowserModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    AppRoutingModule,\n    AppStoreModule,\n  ],\n  providers: [\n    { provide: \"API_URL\", useValue: environment.api },\n    { provide: LocationStrategy, useClass: HashLocationStrategy },\n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "AppStoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-ebf1499761ee54fa968bf5c7cce9940f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\nimport { Routes, RouterModule, PreloadAllModules } from \"@angular/router\";\n\nexport const routes: Routes = [\n  {\n    path: \"\",\n    loadChildren: () =>\n      \"import(\\\"./todos/todos.module\\\").then((m) => m.TodosModule)\",\n  },\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes, {\n      preloadingStrategy: PreloadAllModules,\n      relativeLinkResolution: \"legacy\",\n    }),\n  ],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppStoreModule",
            "id": "module-AppStoreModule-009069176f3c9abb39429caf15a18240",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/store.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\nimport { StoreModule } from \"@ngrx/store\";\nimport { EffectsModule } from \"@ngrx/effects\";\nimport { StoreDevtoolsModule } from \"@ngrx/store-devtools\";\n\nimport { environment } from \"@environments/environment\";\n\nimport { reducers, metaReducers } from \"./reducers\";\n\n@NgModule({\n  imports: [\n    StoreModule.forRoot(reducers, { metaReducers }),\n    EffectsModule.forRoot([]),\n    StoreDevtoolsModule.instrument({\n      maxAge: 25,\n      logOnly: environment.production,\n    }),\n  ],\n})\nexport class AppStoreModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TodosModule",
            "id": "module-TodosModule-b21895a723715d1b9381716773a17f12",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/todos/todos.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { ReactiveFormsModule } from \"@angular/forms\";\nimport { StoreModule } from \"@ngrx/store\";\nimport { EffectsModule } from \"@ngrx/effects\";\n\nimport { TodosRoutingModule } from \"./todos-routing.module\";\n\nimport * as fromComponents from \"./components\";\nimport * as fromContainers from \"./containers\";\nimport * as fromReducers from \"./reducers\";\nimport * as fromServices from \"./services\";\nimport * as fromEffects from \"./effects\";\nimport * as fromGuards from \"./guards\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    TodosRoutingModule,\n    StoreModule.forFeature(\"todos-module\", fromReducers.reducers, {\n      metaReducers: fromReducers.metaReducers,\n    }),\n    EffectsModule.forFeature(fromEffects.EFFECTS),\n  ],\n  declarations: [...fromComponents.COMPONENTS, ...fromContainers.CONTAINERS],\n  exports: [...fromComponents.COMPONENTS, ...fromContainers.CONTAINERS],\n  providers: [...fromServices.SERVICES, ...fromGuards.GUARDS],\n})\nexport class TodosModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "...fromContainers.CONTAINERS"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "TodosRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "...fromContainers.CONTAINERS"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TodosRoutingModule",
            "id": "module-TodosRoutingModule-8ea21415b445f370de537628e01af61c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/todos/todos-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from \"@angular/core\";\nimport { Routes, RouterModule } from \"@angular/router\";\n\nimport { TodosGuard } from \"@todos/guards/todos.guard\";\nimport { LayoutContainer } from \"./containers/layout/layout.container\";\nimport { TodoDetailContainer } from \"./containers/todo-detail/todo-detail.container\";\n\nconst routes: Routes = [\n  {\n    path: \"\",\n    component: LayoutContainer,\n    canActivate: [TodosGuard],\n  },\n  {\n    path: \":filter\",\n    component: LayoutContainer,\n    canActivate: [TodosGuard],\n  },\n  {\n    path: \"detail/:id\",\n    component: TodoDetailContainer,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class TodosRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "addTodo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/actions/todos.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  \"[TodoModule] AddTodo\",\n  props<{ todo: Todo }>()\n)"
            },
            {
                "name": "addTodoFail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/actions/todos-ui.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  \"[TodoModule] AddTodoFail\",\n  props<{ error: string }>()\n)"
            },
            {
                "name": "addTodoRequest",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/actions/todos-ui.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  \"[TodoModule] AddTodoRequest\",\n  props<{ todo: Todo }>()\n)"
            },
            {
                "name": "addTodoSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/actions/todos-ui.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\"[TodoModule] AddTodoSuccess\")"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/components/todo/todo.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/containers/layout/layout.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/containers/todo-list/todo-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Basic2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/containers/todo-list/todo-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BasicCompleted",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/components/todo/todo.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BasicSimpleAnswer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/containers/layout/layout.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "COMPONENTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/components/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[FooterComponent, NewTodoComponent, TodoComponent]"
            },
            {
                "name": "CONTAINERS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/containers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  LayoutContainer,\n  TodoListContainer,\n  TodoDetailContainer,\n]"
            },
            {
                "name": "deleteTodo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/actions/todos.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  \"[TodoModule] DeleteTodo\",\n  props<{ id: number }>()\n)"
            },
            {
                "name": "deleteTodoFail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/actions/todos-ui.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  \"[TodoModule] DeleteTodoFail\",\n  props<{ error: string }>()\n)"
            },
            {
                "name": "deleteTodoRequest",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/actions/todos-ui.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  \"[TodoModule] DeleteTodoRequest\",\n  props<{ id: number }>()\n)"
            },
            {
                "name": "deleteTodoSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/actions/todos-ui.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\"[TodoModule] DeleteTodoSuccess\")"
            },
            {
                "name": "EFFECTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/effects/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[TodosEffects]"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  api: \"https://jsonplaceholder.typicode.com\",\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  api: \"https://jsonplaceholder.typicode.com\",\n}"
            },
            {
                "name": "getCountVisibleTodos",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/selectors/todos.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  getVisibleTodos,\n  (todos) => todos.length\n)"
            },
            {
                "name": "getFilter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/selectors/todos.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(getRouterState, (router) => {\n  if (router && router.state && router.state.params.filter) {\n    const { filter } = router.state.params;\n\n    switch (filter) {\n      default:\n        return \"all\";\n      case \"completed\":\n        return \"completed\";\n      case \"active\":\n        return \"active\";\n    }\n  }\n  return \"all\";\n})"
            },
            {
                "name": "geTodosState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/selectors/todos.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  getTodosModuleState,\n  (state) => state.todos\n)"
            },
            {
                "name": "getRouterState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/reducers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<RouterReducerState<RouterStateUrl>>(\"router\")"
            },
            {
                "name": "getTodo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/selectors/todos.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  getEntitiesTodos,\n  getRouterState,\n  (entities, router) => {\n    if (router?.state?.params) {\n      const { id } = router.state.params;\n      return entities[id];\n    }\n    return null;\n  }\n)"
            },
            {
                "name": "getTodosModuleState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/reducers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<TodosModuleState>(\"todos-module\")"
            },
            {
                "name": "getVisibleTodos",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/selectors/todos.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  getAllTodos,\n  getRouterState,\n  (todos, router) => {\n    if (router?.state?.params) {\n      const { filter } = router.state.params;\n      switch (filter) {\n        default:\n          return todos;\n        case \"completed\":\n          return todos.filter((t) => t.completed);\n        case \"active\":\n          return todos.filter((t) => !t.completed);\n      }\n    }\n    return todos;\n  }\n)"
            },
            {
                "name": "GUARDS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/guards/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[TodosGuard]"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/reducers/todos-ui.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "TodosUIState",
                "defaultValue": "{\n  loadingTodos: false,\n  errorLoadingTodos: null,\n  loadingAddTodo: false,\n  errorAddTodo: null,\n  loadingUpdateTodo: false,\n  errorUpdateTodo: null,\n  loadingDeleteTodo: false,\n  errorDeleteTodo: null,\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/reducers/todos.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "TodosState",
                "defaultValue": "todosAdapter.getInitialState({\n  // additional entity state properties\n})"
            },
            {
                "name": "loadTodos",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/actions/todos.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  \"[TodoModule] LoadTodos\",\n  props<{ todos: Todo[] }>()\n)"
            },
            {
                "name": "loadTodosFail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/actions/todos-ui.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  \"[TodoModule] LoadTodosFail\",\n  props<{ error: string }>()\n)"
            },
            {
                "name": "loadTodosRequest",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/actions/todos-ui.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\"[TodoModule] LoadTodosRequest\")"
            },
            {
                "name": "loadTodosSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/actions/todos-ui.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\"[TodoModule] LoadTodosSuccess\")"
            },
            {
                "name": "metaReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/reducers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaReducer[]",
                "defaultValue": "!environment.production\n  ? [\n      metaReducerForStorybook,\n      (reducer: ActionReducer<any>) =>\n        storeLogger({ collapsed: true })(reducer),\n    ]\n  : []"
            },
            {
                "name": "metaReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/reducers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaReducer[]",
                "defaultValue": "!environment.production ? [] : []"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/reducers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ActionReducerMap<State>",
                "defaultValue": "{\n  router: routerReducer,\n}"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/reducers/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ActionReducerMap<TodosModuleState>",
                "defaultValue": "{\n  todos: todosReducer,\n  todosUI: todosUIReducer,\n}"
            },
            {
                "name": "SERVICES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/services/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any[]",
                "defaultValue": "[TodosService]"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/components/todo/todo.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TodoComponent>",
                "defaultValue": "(props) => ({ props })"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/containers/layout/layout.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<LayoutContainer>",
                "defaultValue": "(props) => ({ props })"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/containers/todo-list/todo-list.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TodoListContainer>",
                "defaultValue": "(props) => ({ props })"
            },
            {
                "name": "todosAdapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/states/todos.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "EntityAdapter<Todo>",
                "defaultValue": "createEntityAdapter<Todo>()"
            },
            {
                "name": "todosReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/reducers/todos.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(TodoActions.loadTodos, (state, { todos }) => {\n    return todosAdapter.setAll(todos, state);\n  }),\n  on(TodoActions.addTodo, (state, { todo }) => {\n    return todosAdapter.addOne(todo, state);\n  }),\n  on(TodoActions.updateTodo, (state, { update }) => {\n    return todosAdapter.updateOne(update, state);\n  }),\n  on(TodoActions.deleteTodo, (state, { id }) => {\n    return todosAdapter.removeOne(id, state);\n  })\n)"
            },
            {
                "name": "todosUIReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/reducers/todos-ui.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(TodoUIActions.loadTodosRequest, (state) => {\n    return {\n      ...state,\n      loadingTodos: true,\n      errorLoadingTodos: null,\n    };\n  }),\n  on(TodoUIActions.loadTodosSuccess, (state) => {\n    return {\n      ...state,\n      loadingTodos: false,\n      errorLoadingTodos: null,\n    };\n  }),\n  on(TodoUIActions.loadTodosFail, (state, { error }) => {\n    return {\n      ...state,\n      loadingTodos: false,\n      errorLoadingTodos: error || null,\n    };\n  }),\n  on(TodoUIActions.addTodoRequest, (state) => {\n    return {\n      ...state,\n      loadingAddTodo: true,\n      errorAddTodo: null,\n    };\n  }),\n  on(TodoUIActions.loadTodosSuccess, (state) => {\n    return {\n      ...state,\n      loadingAddTodo: false,\n      errorAddTodo: null,\n    };\n  }),\n  on(TodoUIActions.loadTodosFail, (state, { error }) => {\n    return {\n      ...state,\n      loadingAddTodo: false,\n      errorAddTodo: error || null,\n    };\n  }),\n  on(TodoUIActions.updateTodoRequest, (state) => {\n    return {\n      ...state,\n      loadingUpdateTodo: true,\n      errorUpdateTodo: null,\n    };\n  }),\n  on(TodoUIActions.updateTodoSuccess, (state) => {\n    return {\n      ...state,\n      loadingUpdateTodo: false,\n      errorUpdateTodo: null,\n    };\n  }),\n  on(TodoUIActions.addTodoFail, (state, { error }) => {\n    return {\n      ...state,\n      loadingUpdateTodo: false,\n      errorUpdateTodo: error || null,\n    };\n  }),\n  on(TodoUIActions.deleteTodoRequest, (state) => {\n    return {\n      ...state,\n      loadingDeleteTodo: true,\n      errorDeleteTodo: null,\n    };\n  }),\n  on(TodoUIActions.deleteTodoSuccess, (state) => {\n    return {\n      ...state,\n      loadingDeleteTodo: false,\n      errorDeleteTodo: null,\n    };\n  }),\n  on(TodoUIActions.deleteTodoFail, (state, { error }) => {\n    return {\n      ...state,\n      loadingDeleteTodo: false,\n      errorDeleteTodo: error || null,\n    };\n  })\n)"
            },
            {
                "name": "updateTodo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/actions/todos.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  \"[TodoModule] UpdateTodo\",\n  props<{ update: Update<Todo> }>()\n)"
            },
            {
                "name": "updateTodoFail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/actions/todos-ui.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  \"[TodoModule] UpdateTodoFail\",\n  props<{ error: string }>()\n)"
            },
            {
                "name": "updateTodoRequest",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/actions/todos-ui.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  \"[TodoModule] UpdateTodoRequest\",\n  props<{ update: Update<Todo> }>()\n)"
            },
            {
                "name": "updateTodoSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/actions/todos-ui.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\"[TodoModule] updateTodoSuccess\")"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/todos/selectors/todos.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "todosAdapter.getSelectors(geTodosState)"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "TodosState",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "EntityState<Todo>",
                "file": "src/app/todos/states/todos.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 176
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/todos/actions/todos.actions.ts": [
                {
                    "name": "addTodo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/actions/todos.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  \"[TodoModule] AddTodo\",\n  props<{ todo: Todo }>()\n)"
                },
                {
                    "name": "deleteTodo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/actions/todos.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  \"[TodoModule] DeleteTodo\",\n  props<{ id: number }>()\n)"
                },
                {
                    "name": "loadTodos",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/actions/todos.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  \"[TodoModule] LoadTodos\",\n  props<{ todos: Todo[] }>()\n)"
                },
                {
                    "name": "updateTodo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/actions/todos.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  \"[TodoModule] UpdateTodo\",\n  props<{ update: Update<Todo> }>()\n)"
                }
            ],
            "src/app/todos/actions/todos-ui.actions.ts": [
                {
                    "name": "addTodoFail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/actions/todos-ui.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  \"[TodoModule] AddTodoFail\",\n  props<{ error: string }>()\n)"
                },
                {
                    "name": "addTodoRequest",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/actions/todos-ui.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  \"[TodoModule] AddTodoRequest\",\n  props<{ todo: Todo }>()\n)"
                },
                {
                    "name": "addTodoSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/actions/todos-ui.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\"[TodoModule] AddTodoSuccess\")"
                },
                {
                    "name": "deleteTodoFail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/actions/todos-ui.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  \"[TodoModule] DeleteTodoFail\",\n  props<{ error: string }>()\n)"
                },
                {
                    "name": "deleteTodoRequest",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/actions/todos-ui.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  \"[TodoModule] DeleteTodoRequest\",\n  props<{ id: number }>()\n)"
                },
                {
                    "name": "deleteTodoSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/actions/todos-ui.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\"[TodoModule] DeleteTodoSuccess\")"
                },
                {
                    "name": "loadTodosFail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/actions/todos-ui.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  \"[TodoModule] LoadTodosFail\",\n  props<{ error: string }>()\n)"
                },
                {
                    "name": "loadTodosRequest",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/actions/todos-ui.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\"[TodoModule] LoadTodosRequest\")"
                },
                {
                    "name": "loadTodosSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/actions/todos-ui.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\"[TodoModule] LoadTodosSuccess\")"
                },
                {
                    "name": "updateTodoFail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/actions/todos-ui.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  \"[TodoModule] UpdateTodoFail\",\n  props<{ error: string }>()\n)"
                },
                {
                    "name": "updateTodoRequest",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/actions/todos-ui.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  \"[TodoModule] UpdateTodoRequest\",\n  props<{ update: Update<Todo> }>()\n)"
                },
                {
                    "name": "updateTodoSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/actions/todos-ui.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\"[TodoModule] updateTodoSuccess\")"
                }
            ],
            "src/app/todos/components/todo/todo.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/components/todo/todo.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "BasicCompleted",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/components/todo/todo.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/components/todo/todo.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TodoComponent>",
                    "defaultValue": "(props) => ({ props })"
                }
            ],
            "src/app/todos/containers/layout/layout.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/containers/layout/layout.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "BasicSimpleAnswer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/containers/layout/layout.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/containers/layout/layout.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<LayoutContainer>",
                    "defaultValue": "(props) => ({ props })"
                }
            ],
            "src/app/todos/containers/todo-list/todo-list.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/containers/todo-list/todo-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Basic2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/containers/todo-list/todo-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/containers/todo-list/todo-list.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TodoListContainer>",
                    "defaultValue": "(props) => ({ props })"
                }
            ],
            "src/app/todos/components/index.ts": [
                {
                    "name": "COMPONENTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/components/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[FooterComponent, NewTodoComponent, TodoComponent]"
                }
            ],
            "src/app/todos/containers/index.ts": [
                {
                    "name": "CONTAINERS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/containers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  LayoutContainer,\n  TodoListContainer,\n  TodoDetailContainer,\n]"
                }
            ],
            "src/app/todos/effects/index.ts": [
                {
                    "name": "EFFECTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/effects/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[TodosEffects]"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  api: \"https://jsonplaceholder.typicode.com\",\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  api: \"https://jsonplaceholder.typicode.com\",\n}"
                }
            ],
            "src/app/todos/selectors/todos.selectors.ts": [
                {
                    "name": "getCountVisibleTodos",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/selectors/todos.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  getVisibleTodos,\n  (todos) => todos.length\n)"
                },
                {
                    "name": "getFilter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/selectors/todos.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(getRouterState, (router) => {\n  if (router && router.state && router.state.params.filter) {\n    const { filter } = router.state.params;\n\n    switch (filter) {\n      default:\n        return \"all\";\n      case \"completed\":\n        return \"completed\";\n      case \"active\":\n        return \"active\";\n    }\n  }\n  return \"all\";\n})"
                },
                {
                    "name": "geTodosState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/selectors/todos.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  getTodosModuleState,\n  (state) => state.todos\n)"
                },
                {
                    "name": "getTodo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/selectors/todos.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  getEntitiesTodos,\n  getRouterState,\n  (entities, router) => {\n    if (router?.state?.params) {\n      const { id } = router.state.params;\n      return entities[id];\n    }\n    return null;\n  }\n)"
                },
                {
                    "name": "getVisibleTodos",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/selectors/todos.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  getAllTodos,\n  getRouterState,\n  (todos, router) => {\n    if (router?.state?.params) {\n      const { filter } = router.state.params;\n      switch (filter) {\n        default:\n          return todos;\n        case \"completed\":\n          return todos.filter((t) => t.completed);\n        case \"active\":\n          return todos.filter((t) => !t.completed);\n      }\n    }\n    return todos;\n  }\n)"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/selectors/todos.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "todosAdapter.getSelectors(geTodosState)"
                }
            ],
            "src/app/reducers/index.ts": [
                {
                    "name": "getRouterState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/reducers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<RouterReducerState<RouterStateUrl>>(\"router\")"
                },
                {
                    "name": "metaReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/reducers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaReducer[]",
                    "defaultValue": "!environment.production\n  ? [\n      metaReducerForStorybook,\n      (reducer: ActionReducer<any>) =>\n        storeLogger({ collapsed: true })(reducer),\n    ]\n  : []"
                },
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/reducers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionReducerMap<State>",
                    "defaultValue": "{\n  router: routerReducer,\n}"
                }
            ],
            "src/app/todos/reducers/index.ts": [
                {
                    "name": "getTodosModuleState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/reducers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<TodosModuleState>(\"todos-module\")"
                },
                {
                    "name": "metaReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/reducers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaReducer[]",
                    "defaultValue": "!environment.production ? [] : []"
                },
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/reducers/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionReducerMap<TodosModuleState>",
                    "defaultValue": "{\n  todos: todosReducer,\n  todosUI: todosUIReducer,\n}"
                }
            ],
            "src/app/todos/guards/index.ts": [
                {
                    "name": "GUARDS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/guards/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[TodosGuard]"
                }
            ],
            "src/app/todos/reducers/todos-ui.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/reducers/todos-ui.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TodosUIState",
                    "defaultValue": "{\n  loadingTodos: false,\n  errorLoadingTodos: null,\n  loadingAddTodo: false,\n  errorAddTodo: null,\n  loadingUpdateTodo: false,\n  errorUpdateTodo: null,\n  loadingDeleteTodo: false,\n  errorDeleteTodo: null,\n}"
                },
                {
                    "name": "todosUIReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/reducers/todos-ui.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(TodoUIActions.loadTodosRequest, (state) => {\n    return {\n      ...state,\n      loadingTodos: true,\n      errorLoadingTodos: null,\n    };\n  }),\n  on(TodoUIActions.loadTodosSuccess, (state) => {\n    return {\n      ...state,\n      loadingTodos: false,\n      errorLoadingTodos: null,\n    };\n  }),\n  on(TodoUIActions.loadTodosFail, (state, { error }) => {\n    return {\n      ...state,\n      loadingTodos: false,\n      errorLoadingTodos: error || null,\n    };\n  }),\n  on(TodoUIActions.addTodoRequest, (state) => {\n    return {\n      ...state,\n      loadingAddTodo: true,\n      errorAddTodo: null,\n    };\n  }),\n  on(TodoUIActions.loadTodosSuccess, (state) => {\n    return {\n      ...state,\n      loadingAddTodo: false,\n      errorAddTodo: null,\n    };\n  }),\n  on(TodoUIActions.loadTodosFail, (state, { error }) => {\n    return {\n      ...state,\n      loadingAddTodo: false,\n      errorAddTodo: error || null,\n    };\n  }),\n  on(TodoUIActions.updateTodoRequest, (state) => {\n    return {\n      ...state,\n      loadingUpdateTodo: true,\n      errorUpdateTodo: null,\n    };\n  }),\n  on(TodoUIActions.updateTodoSuccess, (state) => {\n    return {\n      ...state,\n      loadingUpdateTodo: false,\n      errorUpdateTodo: null,\n    };\n  }),\n  on(TodoUIActions.addTodoFail, (state, { error }) => {\n    return {\n      ...state,\n      loadingUpdateTodo: false,\n      errorUpdateTodo: error || null,\n    };\n  }),\n  on(TodoUIActions.deleteTodoRequest, (state) => {\n    return {\n      ...state,\n      loadingDeleteTodo: true,\n      errorDeleteTodo: null,\n    };\n  }),\n  on(TodoUIActions.deleteTodoSuccess, (state) => {\n    return {\n      ...state,\n      loadingDeleteTodo: false,\n      errorDeleteTodo: null,\n    };\n  }),\n  on(TodoUIActions.deleteTodoFail, (state, { error }) => {\n    return {\n      ...state,\n      loadingDeleteTodo: false,\n      errorDeleteTodo: error || null,\n    };\n  })\n)"
                }
            ],
            "src/app/todos/reducers/todos.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/reducers/todos.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TodosState",
                    "defaultValue": "todosAdapter.getInitialState({\n  // additional entity state properties\n})"
                },
                {
                    "name": "todosReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/reducers/todos.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(TodoActions.loadTodos, (state, { todos }) => {\n    return todosAdapter.setAll(todos, state);\n  }),\n  on(TodoActions.addTodo, (state, { todo }) => {\n    return todosAdapter.addOne(todo, state);\n  }),\n  on(TodoActions.updateTodo, (state, { update }) => {\n    return todosAdapter.updateOne(update, state);\n  }),\n  on(TodoActions.deleteTodo, (state, { id }) => {\n    return todosAdapter.removeOne(id, state);\n  })\n)"
                }
            ],
            "src/app/todos/services/index.ts": [
                {
                    "name": "SERVICES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/services/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "defaultValue": "[TodosService]"
                }
            ],
            "src/app/todos/states/todos.state.ts": [
                {
                    "name": "todosAdapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/todos/states/todos.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EntityAdapter<Todo>",
                    "defaultValue": "createEntityAdapter<Todo>()"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/todos/states/todos.state.ts": [
                {
                    "name": "TodosState",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "EntityState<Todo>",
                    "file": "src/app/todos/states/todos.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 176
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "loadChildren": "./todos/todos.module#TodosModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/todos/todos-routing.module.ts",
                                        "module": "TodosRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "LayoutContainer",
                                                "canActivate": [
                                                    "TodosGuard"
                                                ]
                                            },
                                            {
                                                "path": ":filter",
                                                "component": "LayoutContainer",
                                                "canActivate": [
                                                    "TodosGuard"
                                                ]
                                            },
                                            {
                                                "path": "detail/:id",
                                                "component": "TodoDetailContainer"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "TodosModule"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/custom-route-serializer.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CustomSerializer",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/custom-route-serializer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RouterStateUrl",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getRouterState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metaReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/actions/todos-ui.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addTodoFail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/actions/todos-ui.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addTodoRequest",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/actions/todos-ui.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addTodoSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/actions/todos-ui.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteTodoFail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/actions/todos-ui.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteTodoRequest",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/actions/todos-ui.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteTodoSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/actions/todos-ui.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadTodosFail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/actions/todos-ui.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadTodosRequest",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/actions/todos-ui.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadTodosSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/actions/todos-ui.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateTodoFail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/actions/todos-ui.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateTodoRequest",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/actions/todos-ui.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateTodoSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/actions/todos.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addTodo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/actions/todos.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteTodo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/actions/todos.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadTodos",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/actions/todos.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateTodo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/components/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/components/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COMPONENTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/components/new-todo/new-todo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NewTodoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/components/todo/todo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TodoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/components/todo/todo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/components/todo/todo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BasicCompleted",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/components/todo/todo.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/containers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CONTAINERS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/containers/layout/layout.container.ts",
                "type": "component",
                "linktype": "component",
                "name": "LayoutContainer",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/containers/layout/layout.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/containers/layout/layout.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BasicSimpleAnswer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/containers/layout/layout.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/containers/todo-detail/todo-detail.container.ts",
                "type": "component",
                "linktype": "component",
                "name": "TodoDetailContainer",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/containers/todo-list/todo-list.container.ts",
                "type": "component",
                "linktype": "component",
                "name": "TodoListContainer",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/containers/todo-list/todo-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/containers/todo-list/todo-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/containers/todo-list/todo-list.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/effects/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EFFECTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/effects/todos.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TodosEffects",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/guards/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GUARDS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/guards/todos.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "TodosGuard",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/models/todo.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Todo",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getTodosModuleState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metaReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/reducers/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/reducers/todos-ui.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/reducers/todos-ui.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "todosUIReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/reducers/todos.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/reducers/todos.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "todosReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/selectors/todos.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getCountVisibleTodos",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/selectors/todos.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getFilter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/selectors/todos.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "geTodosState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/selectors/todos.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getTodo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/selectors/todos.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getVisibleTodos",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/selectors/todos.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/services/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SERVICES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/services/todos.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TodosService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/states/todos-module.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TodosModuleState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/states/todos-ui.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TodosUIState",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/todos/states/todos.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "todosAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/utils/validators.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CustomValidators",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}